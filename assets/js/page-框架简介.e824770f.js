(window.webpackJsonp=window.webpackJsonp||[]).push([[311],{542:function(t,s,e){t.exports=e.p+"assets/img/image-20210726174022729.d157eab8.png"},832:function(t,s,e){"use strict";e.r(s);var l=e(1),v=Object(l.a)({},(function(){var t=this,s=t.$createElement,e=t._self._c||s;return e("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[e("blockquote",[e("p",[t._v("npm 提供了大量的第三方模块，其中不乏有许多 Web 框架 ，而Express就是一个简洁而灵活的nodejs Web应用框架，提供了一系列强大特性来帮助我们创建各种web应用。使用Express可以快速搭建一个完整功能的网站。")])]),t._v(" "),e("p",[e("strong",[t._v("实现的功能")])]),t._v(" "),e("ul",[e("li",[t._v("路由控制；")]),t._v(" "),e("li",[t._v("模板解析支持；")]),t._v(" "),e("li",[t._v("动态视图；")]),t._v(" "),e("li",[t._v("用户会话；")]),t._v(" "),e("li",[t._v("CSRF 保护；")]),t._v(" "),e("li",[t._v("静态文件服务；")]),t._v(" "),e("li",[t._v("错误控制器；")]),t._v(" "),e("li",[t._v("访问日志；")]),t._v(" "),e("li",[t._v("缓存；")]),t._v(" "),e("li",[t._v("插件支持。")])]),t._v(" "),e("p",[e("strong",[t._v("核心特性")])]),t._v(" "),e("ul",[e("li",[t._v("通过设置中间件来处理HTTP请求。")]),t._v(" "),e("li",[t._v("通过路由来执行不同的HTTP请求操作。")]),t._v(" "),e("li",[t._v("通过模板来渲染HTML页面。")])]),t._v(" "),e("div",{staticClass:"custom-block tip"},[e("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),e("p",[t._v("Express 不是一个无所不能的全能框架，它只是一个轻量级的 Web 框 架，多数功能只是对 HTTP 协议中常用操作的封装，更多的功能需要插件或者整合其他模块来完成  。")])])])}),[],!1,null,null,null);s.default=v.exports},899:function(t,s,e){"use strict";e.r(s);var l=e(1),v=Object(l.a)({},(function(){var t=this,s=t.$createElement,l=t._self._c||s;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("blockquote",[l("p",[t._v("Koa是Express背后的团队设计的一个新的web框架，其目标是为web应用程序和api提供一个更小、更富表现力、更健壮的基础。 通过利用异步函数，Koa允许您放弃回调并极大地增加错误处理。 Koa在其核心中没有捆绑任何中间件，它提供了一套优雅的方法，使编写服务器变得快速和愉快。")])]),t._v(" "),l("p",[l("img",{attrs:{src:e(542),alt:"image-20210726174022729"}})]),t._v(" "),l("p",[t._v("由于Koa核心不捆绑任何中间件，因此koa核心是“纯净的”，这极大的方便了用户的扩展。此外，koa使用了Peomise、async/await语法来进行移步编程，而express是基于事件和回调的。")]),t._v(" "),l("p",[l("strong",[t._v("koa框架和express框架的主要差别在于异步编程和中间件方面，其他特性是相似的。")])]),t._v(" "),l("ul",[l("li",[t._v("Express框架使用回调来进行异步处理，这也是Node.js标准的做法。但是基于回调的异步编程模型在多个异步操作之间有顺序依赖时，会产生回调地狱（Callback Hell），也就是多层callback嵌套问题，代码不利于维护。")]),t._v(" "),l("li",[t._v("Koa框架使用了ES2017最新的async/await语法来进行异步编程，从根本上解决了传统Node.js异步编程风格存在的问题，但是需要将异步调用包装为Promise。")])]),t._v(" "),l("div",{staticClass:"custom-block tip"},[l("p",{staticClass:"custom-block-title"},[t._v("提示")]),t._v(" "),l("p",[t._v("由于Koa进行异步调用时强制使用async/await，因此需要将异步回调方法转换为Promise，如果每个回调方法都需要自己包装的话，工作量还是有点大，这一问题目前最好的解决方案—Bluebird。")])])])}),[],!1,null,null,null);s.default=v.exports}}]);