(window.webpackJsonp=window.webpackJsonp||[]).push([[293],{900:function(t,l,v){"use strict";v.r(l);var _=v(1),e=Object(_.a)({},(function(){var t=this,l=t.$createElement,v=t._self._c||l;return v("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[v("blockquote",[v("p",[t._v("定义一系列操作的骨架，简化后面类似操作的内容。定义一个操作中的算法骨架，而将算法的一些步骤延迟到子类中，使得子类可以不改变该算法结构的情况下重定义该算法的某些特定步骤。它是一种类行为型模式。")])]),t._v(" "),v("p",[t._v("该模式的主要优点：")]),t._v(" "),v("ul",[v("li",[t._v("它封装了不变部分，扩展可变部分。它把认为是不变部分的算法封装到父类中实现，而把可变部分算法由子类继承实现，便于子类继续扩展。")]),t._v(" "),v("li",[t._v("它在父类中提取了公共的部分代码，便于代码复用。")]),t._v(" "),v("li",[t._v("部分方法是由子类实现的，因此子类可以通过扩展方式增加相应的功能，符合开闭原则。")])]),t._v(" "),v("p",[t._v("该模式的主要缺点：")]),t._v(" "),v("ul",[v("li",[t._v("对每个不同的实现都需要定义一个子类，这会导致类的个数增加，系统更加庞大，设计也更加抽象，间接地增加了系统实现的复杂度。")]),t._v(" "),v("li",[t._v("父类中的抽象方法由子类实现，子类执行的结果会影响父类的结果，这导致一种反向的控制结构，它提高了代码阅读的难度。")]),t._v(" "),v("li",[t._v("由于继承关系自身的缺点，如果父类添加新的抽象方法，则所有子类都要改一遍。")])])])}),[],!1,null,null,null);l.default=e.exports}}]);