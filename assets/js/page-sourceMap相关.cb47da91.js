(window.webpackJsonp=window.webpackJsonp||[]).push([[136],{1145:function(e,o,v){"use strict";v.r(o);var c=v(1),_=Object(c.a)({},(function(){var e=this,o=e.$createElement,v=e._self._c||o;return v("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[v("blockquote",[v("p",[e._v("Sourcemap是什么？有什么作用？在生产环境怎么用？")])]),e._v(" "),v("p",[v("code",[e._v("Sourcemap")]),e._v(" 本质上是一个信息文件，里面储存着代码转换前后的对应位置信息。它记录了转换压缩后的代码所对应的转换前的源代码位置，是源代码和生产代码的映射。 "),v("code",[e._v("Sourcemap")]),e._v(" 解决了在打包过程中，代码经过压缩，去空格以及 "),v("code",[e._v("babel")]),e._v(" 编译转化后，由于代码之间差异性过大，造成无法"),v("code",[e._v("debug")]),e._v("的问题，简单说 "),v("code",[e._v("Sourcemap")]),e._v(" 构建了处理前以及处理后的代码之间的一座桥梁，方便定位生产环境中出现 "),v("code",[e._v("bug")]),e._v(" 的位置。因为现在的前端开发都是模块化、组件化的方式，在上线前对 js 和 css 文件进行合并压缩容易造成混淆。如果对这样的线上代码进行调试，肯定不切实际，"),v("code",[e._v("sourceMap")]),e._v(" 的作用就是能够让浏览器的调试面版将生成后的代码映射到源码文件当中，开发者可以在源码文件中 debug，这样就会让程序员调试轻松、简单很多。")]),e._v(" "),v("p",[v("code",[e._v("Sourcemap")]),e._v(" 的种类有很多， 在生产环境下可以用"),v("code",[e._v("process.env")]),e._v("判断一下。  "),v("code",[e._v("webpack")]),e._v("中可以在"),v("code",[e._v("devtool")]),e._v("中设置, 在开发环境中可以配置"),v("code",[e._v("devtool")]),e._v("为"),v("code",[e._v("cheap-module-source-map")]),e._v("，方便调试。生产环境下建议采用"),v("code",[e._v("none")]),e._v("的方式，这样做不暴露源代码。或者是"),v("code",[e._v("nosources-source-map")]),e._v(" 的方式，既可以定位源代码位置，又不暴露源代码。")])])}),[],!1,null,null,null);o.default=_.exports}}]);