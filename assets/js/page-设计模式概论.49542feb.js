(window.webpackJsonp=window.webpackJsonp||[]).push([[296],{881:function(v,_,l){"use strict";l.r(_);var t=l(1),i=Object(t.a)({},(function(){var v=this,_=v.$createElement,l=v._self._c||_;return l("ContentSlotsDistributor",{attrs:{"slot-key":v.$parent.slotKey}},[l("blockquote",[l("p",[v._v("设计模式是一套可以被反复使用的、多数人知晓的、经过分类编目的、代码设计经验的总结，使用设计模式是为了可重用代码、让代码更容易被他人理解并且提高代码的可靠性。")])]),v._v(" "),l("h2",{attrs:{id:"扮演的角色"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#扮演的角色"}},[v._v("#")]),v._v(" 扮演的角色")]),v._v(" "),l("ul",[l("li",[v._v("帮助我们组织模块：通过一些设计模式，组织模块间的组成结构。")]),v._v(" "),l("li",[v._v("帮助我们设计沟通：有的设计模式可以帮助我们设计模块间如何沟通。")]),v._v(" "),l("li",[v._v("提高代码质量：通过设计模式，让代码更加优雅。")])]),v._v(" "),l("h2",{attrs:{id:"设计原则"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#设计原则"}},[v._v("#")]),v._v(" 设计原则")]),v._v(" "),l("ol",[l("li",[l("strong",[v._v("开闭原则")]),v._v("：就是说对扩展开放对修改关闭，比如：我们的程序在使用的时候要留出可以扩展的功能，但是在具体使用的使用不能让别人修改我们的源码，例：vue插件就是一些开闭原则的体现，vue留出接口通过插件来扩展vue的功能；")]),v._v(" "),l("li",[l("strong",[v._v("单一职责原则")]),v._v("：就是说我们的一个功能模块只做一件事情；")]),v._v(" "),l("li",[l("strong",[v._v("依赖倒置原则")]),v._v("：我们的上层模块不要依赖于下层模块，而是依赖与抽象；")]),v._v(" "),l("li",[l("strong",[v._v("接口隔离原则")]),v._v("：就是说我们的接口应该细化，功能应该单一；")]),v._v(" "),l("li",[l("strong",[v._v("迪米特法则")]),v._v("：迪米特法则（Law of Demeter）又叫作最少知识原则（The Least Knowledge Principle），一个类对于其他类知道的越少越好，就是说一个对象应当对其他对象有尽可能少的了解,只和朋友通信，不和陌生人说话。")]),v._v(" "),l("li",[l("strong",[v._v("里氏替换原则")]),v._v("：子类可以扩展父类的功能，但不能改变父类原有的功能。")])]),v._v(" "),l("h2",{attrs:{id:"分类"}},[l("a",{staticClass:"header-anchor",attrs:{href:"#分类"}},[v._v("#")]),v._v(" 分类：")]),v._v(" "),l("p",[l("strong",[v._v("我们的设计模式可以分为4大类：")])]),v._v(" "),l("ul",[l("li",[l("strong",[v._v("创建型")]),v._v("：帮助我们优雅的创建对象；\n"),l("ul",[l("li",[v._v("工厂模式：大量创建对象；")]),v._v(" "),l("li",[v._v("单例模式：全局只能有我一个；")]),v._v(" "),l("li",[v._v("建造者模式：精细化组合对象；")]),v._v(" "),l("li",[v._v("原型模式：javascript的灵魂；")])])]),v._v(" "),l("li",[l("strong",[v._v("结构型")]),v._v("：帮助我们优雅的设计代码结构；\n"),l("ul",[l("li",[v._v("外观模式：给你的一个套餐；")]),v._v(" "),l("li",[v._v("享元模式：共享来减少数量；")]),v._v(" "),l("li",[v._v("适配器模式：用适配代替更改；")]),v._v(" "),l("li",[v._v("桥接模式：独立出来，然后再对接过去；")]),v._v(" "),l("li",[v._v("装饰者模式：更优雅的扩展需求；")])])]),v._v(" "),l("li",[l("strong",[v._v("行为型")]),v._v("：模块之间行为的模块总结，帮助我们组织模块行为；\n"),l("ul",[l("li",[v._v("观察者模式：我作为第三方转发；")]),v._v(" "),l("li",[v._v("职责链模式：像生产线一样组织模块；")]),v._v(" "),l("li",[v._v("状态模式：用状态代替判断；")]),v._v(" "),l("li",[v._v("命令模式：用命令去解耦；")]),v._v(" "),l("li",[v._v("策略模式：算法工厂；")]),v._v(" "),l("li",[v._v("迭代器模式：告别for循环；")])])]),v._v(" "),l("li",[l("strong",[v._v("技巧型")]),v._v("：帮助我们优化代码的技巧；\n"),l("ul",[l("li",[v._v("链模式：链式调用；")]),v._v(" "),l("li",[v._v("惰性模式：我要搞机器学习；")]),v._v(" "),l("li",[v._v("委托模式：让别人代替你收快递；")]),v._v(" "),l("li",[v._v("等待着模式：等你们都回来再吃饭；")]),v._v(" "),l("li",[v._v("数据访问模式：一个方便的数据管理器；")])])])])])}),[],!1,null,null,null);_.default=i.exports}}]);