(window.webpackJsonp=window.webpackJsonp||[]).push([[271],{938:function(e,t,o){"use strict";o.r(t);var s=o(1),l=Object(s.a)({},(function(){var e=this,t=e.$createElement,o=e._self._c||t;return o("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[o("blockquote",[o("p",[e._v("Node.js 最大的特点就是采用异步式 I/O 与事件驱动的架构设计.")])]),e._v(" "),o("p",[o("strong",[e._v("特点：")])]),e._v(" "),o("ul",[o("li",[e._v("对于高并发的解决方案，传统的架构是多线程模型，也就是为每个业务逻辑提供一个系统线程，通过系统线程切换来弥补同步式 I/O 调用时的时间开销。 Node.js 使用的是单线程模型，对于所有 I/O 都采用异步式的请求方式，避免了频繁的上下文切换。 Node.js 在执行的过程中会维护一个事件队列，程序在执行时进入事件循环等待下一个事件到来，每个异步式 I/O 请求完成后会被推送到事件队列，等待程序进程进行处理。")]),e._v(" "),o("li",[e._v("Node.js 的异步机制是基于事件的，所有的磁盘 I/O、网络通信、数据库查询都以非阻塞的方式请求，返回的结果由事件循环来处理 ;")]),e._v(" "),o("li",[e._v("Node.js 进程在同一时刻只会处理一个事件，完成后立即进入事件循环检查并处理后面的事件。\n"),o("ul",[o("li",[e._v("这样做的好处是，CPU 和内存在同一时间集中处理一件事，同时尽可能让耗时的 I/O 操作并行执行。对于低速连接攻击， Node.js 只是在事件队列中增加请求，等待操作系统的回应，因而不会有任何多线程开销，很大程度上可以提高 Web 应用的健壮性，防止恶意攻击")])])])])])}),[],!1,null,null,null);t.default=l.exports}}]);