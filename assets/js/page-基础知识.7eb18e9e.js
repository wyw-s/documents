(window.webpackJsonp=window.webpackJsonp||[]).push([[218],{828:function(t,s,n){"use strict";n.r(s);var a=n(1),e=Object(a.a)({},(function(){var t=this,s=t.$createElement,n=t._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[n("blockquote",[n("p",[t._v("脚本式流水线更像是一种脚本或编程语言，像其他命令式语言一样可以运行程序和处理逻辑，而声明式流水线则更像Jenkins的传统实现方式，在Web表单的预定义字段中输入关键信息，代表了特定目标和预期行为。与传统的Web表单类似，当执行声明式流水线时，每一个段落定义了基于用户输入数据的执行内容和方式。")])]),t._v(" "),n("h2",{attrs:{id:"脚本式语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#脚本式语法"}},[t._v("#")]),t._v(" 脚本式语法")]),t._v(" "),n("blockquote",[n("p",[t._v("脚本式语法是Jenkins最开始实现的流水线即代码方式。这是一种命令式风格，也就是在流水线脚本中定义逻辑和程序流程。它也更依赖于Groovy语言和结构，特别是对于错误检查和异常处理来说。")])]),t._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("node"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'worker_node1'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tstage"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Source'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t// 从Git仓库中获取代码\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'git@diyvb2:/home/git/repositories/workshop.git'")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tstage"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Compile'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t// 运行Grable 进行编译和单元测试\n\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'grade clean compileJava test'")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br")])]),n("p",[t._v("优点：")]),t._v(" "),n("ul",[n("li",[t._v("更少的代码段落和弱规范要求。")]),t._v(" "),n("li",[t._v("更强大的程序代码能力。")]),t._v(" "),n("li",[t._v("更像编写代码程序。")]),t._v(" "),n("li",[t._v("传统的流水线即代码模型，用户熟悉并向后兼容性。")]),t._v(" "),n("li",[t._v("更灵活的自定义代码操作。")]),t._v(" "),n("li",[t._v("能够构建更复杂的工作流和流水线。")])]),t._v(" "),n("p",[t._v("缺点。")]),t._v(" "),n("ul",[n("li",[t._v("普遍要求更高的编程水平。")]),t._v(" "),n("li",[t._v("语法检查受限于Groovy语言及环境。")]),t._v(" "),n("li",[t._v("和传统Jenkins模型有很大差异。")]),t._v(" "),n("li",[t._v("与声明式流水线的实现相比，同一工作流会更复杂。")])]),t._v(" "),n("h2",{attrs:{id:"声明式语法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#声明式语法"}},[t._v("#")]),t._v(" 声明式语法")]),t._v(" "),n("blockquote",[n("p",[t._v("声明式语法（declarative syntax）是Jenkins提供的一种新的选择。声明式风格的流水线代码被编排在清晰的段落中，相对于只关注实现逻辑，这些流水线的主要区域描述（或“声明”）了我们所期望的流水线的状态和输出。")])]),t._v(" "),n("div",{staticClass:"language-shell line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-shell"}},[n("code",[t._v("pipeline "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\tagent "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" label "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"worker_node1"')]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\tstages "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 获取代码")]),t._v("\n\t\tstage"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Source'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\tsteps "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 从git仓库中获取代码")]),t._v("\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("git")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"git@diyvb2:/home/git/repositories/workshop.git"')]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\tsteps"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),n("span",{pre:!0,attrs:{class:"token string"}},[t._v("'Compile'")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\tsteps "),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[t._v("# 运行Gradle进行编译和单元测试")]),t._v("\n\t\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token function"}},[t._v("sh")]),t._v(" "),n("span",{pre:!0,attrs:{class:"token string"}},[t._v('"gradle clean compilejava test"')]),t._v("\n\t\t\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n\t"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[t._v("1")]),n("br"),n("span",{staticClass:"line-number"},[t._v("2")]),n("br"),n("span",{staticClass:"line-number"},[t._v("3")]),n("br"),n("span",{staticClass:"line-number"},[t._v("4")]),n("br"),n("span",{staticClass:"line-number"},[t._v("5")]),n("br"),n("span",{staticClass:"line-number"},[t._v("6")]),n("br"),n("span",{staticClass:"line-number"},[t._v("7")]),n("br"),n("span",{staticClass:"line-number"},[t._v("8")]),n("br"),n("span",{staticClass:"line-number"},[t._v("9")]),n("br"),n("span",{staticClass:"line-number"},[t._v("10")]),n("br"),n("span",{staticClass:"line-number"},[t._v("11")]),n("br"),n("span",{staticClass:"line-number"},[t._v("12")]),n("br"),n("span",{staticClass:"line-number"},[t._v("13")]),n("br"),n("span",{staticClass:"line-number"},[t._v("14")]),n("br"),n("span",{staticClass:"line-number"},[t._v("15")]),n("br"),n("span",{staticClass:"line-number"},[t._v("16")]),n("br"),n("span",{staticClass:"line-number"},[t._v("17")]),n("br"),n("span",{staticClass:"line-number"},[t._v("18")]),n("br")])]),n("p",[t._v("优点：")]),t._v(" "),n("ul",[n("li",[t._v("更结构化，贴近传统的Jenkins Web表单形式。")]),t._v(" "),n("li",[t._v("更强大的声明内容能力，高可读性。")]),t._v(" "),n("li",[t._v("可以通过Blue Ocean图形化界面自动生成。")]),t._v(" "),n("li",[t._v("段落可映射到常见的Jenkins概念，比如通知。")]),t._v(" "),n("li",[t._v("更友好的语法检查和错误识别。")]),t._v(" "),n("li",[t._v("提升流水线间的一致性。")])]),t._v(" "),n("p",[t._v("缺点：")]),t._v(" "),n("ul",[n("li",[t._v("对迭代逻辑支持较弱（相比程序而言）。")]),t._v(" "),n("li",[t._v("仍在开发完善中（对于传统Jenkins中的部分功能缺乏支持）。")]),t._v(" "),n("li",[t._v("更严格的结构（更难实现自定义流水线代码）。")]),t._v(" "),n("li",[t._v("目前对于复杂的流水线和工作流难以胜任。")])]),t._v(" "),n("blockquote",[n("p",[t._v("简而言之，对于新用户和希望流水线具备传统Jenkins一样可读性的用户来说，声明式流水线更容易学习和维护。这是以灵活性为代价换取结构不支持的功能。\n脚本式流水线更加灵活，提供了“超级用户”的选项，即允许用户不受结构约束实现更多功能。不过，总的来说，任何一种流水线类型对大多数场景而言都同样适用。")])])])}),[],!1,null,null,null);s.default=e.exports}}]);