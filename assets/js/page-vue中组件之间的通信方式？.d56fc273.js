(window.webpackJsonp=window.webpackJsonp||[]).push([[161],{1179:function(t,e,l){"use strict";l.r(e);var s=l(1),v=Object(s.a)({},(function(){var t=this,e=t.$createElement,l=t._self._c||e;return l("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[l("p",[t._v("常见组件通信可以分为三类：")]),t._v(" "),l("ul",[l("li",[t._v("父子组件通信")]),t._v(" "),l("li",[t._v("兄弟组件通信")]),t._v(" "),l("li",[t._v("跨层组件通信")])]),t._v(" "),l("p",[t._v("常见的通信方式有以下几种：")]),t._v(" "),l("ul",[l("li",[t._v("props ：父组件通过props向下传递数据给子组件。")]),t._v(" "),l("li",[t._v("$emit/$on ：子组件通过events给父组件发送消息，实际上就是子组件把自己的数据发送到父组件。")]),t._v(" "),l("li",[t._v("vuex：全局状态管理，数据可以全局使用。")]),t._v(" "),l("li",[t._v("$parent/$children：这两种都是直接得到组件实例，使用后可以直接调用组件的方法或访问数据。")]),t._v(" "),l("li",[t._v("provide/inject  ：主要解决了跨级组件间的通信问题，不过它的使用场景，主要是子组件获取上级组件的状态，跨级组件间建立了一种主动提供与依赖注入的关系。")]),t._v(" "),l("li",[t._v("$attrs/$listeners  ：$attrs与$listeners 是两个对象， $attrs 里存放的是父组件中绑定的非 Props 属性，$listeners 里存放的是父组件中绑定的非原生事件。")])])])}),[],!1,null,null,null);e.default=v.exports}}]);